#include <iostream>
#include <string>
#include <vector>
using namespace std;

string railFenceEncrypt(const string &text, int rails) {
    if (rails <= 1) return text;
    vector<string> fence(rails);
    int rail = 0, step = 1;
    for (char c : text) {
        fence[rail].push_back(c);
        if (rail == 0)
            step = 1;
        else if (rail == rails - 1)
            step = -1;
        rail += step;
    }
    string result;
    for (const auto &s : fence) {
        result += s;
    }
    return result;
}

string railFenceDecrypt(const string &cipher, int rails) {
    if (rails <= 1) return cipher;
    // First, determine the number of characters in each rail.
    vector<int> railLengths(rails, 0);
    int rail = 0, step = 1;
    for (size_t i = 0; i < cipher.size(); i++) {
        railLengths[rail]++;
        if (rail == 0)
            step = 1;
        else if (rail == rails - 1)
            step = -1;
        rail += step;
    }
    // Fill each rail with the appropriate segment of the cipher.
    vector<string> fence(rails);
    int index = 0;
    for (int i = 0; i < rails; i++) {
        fence[i] = cipher.substr(index, railLengths[i]);
        index += railLengths[i];
    }
    // Reconstruct the original message by simulating the zigzag.
    string result;
    vector<int> pos(rails, 0);
    rail = 0; step = 1;
    for (size_t i = 0; i < cipher.size(); i++) {
        result.push_back(fence[rail][pos[rail]++]);
        if (rail == 0)
            step = 1;
        else if (rail == rails - 1)
            step = -1;
        rail += step;
    }
    return result;
}

int main() {
    string message = "WEAREDISCOVEREDFLEEATONCE";
    int rails = 3;
    string enc = railFenceEncrypt(message, rails);
    string dec = railFenceDecrypt(enc, rails);
    cout << "Original:  " << message << "\n"
         << "Encrypted: " << enc << "\n"
         << "Decrypted: " << dec << "\n";
    return 0;
}
 ⁠
